########################
## Source Other Files ##
########################
if [ -f /etc/zshrc ]; then
  source /etc/zshrc
fi

if [ -f ${HOME}/.my_sh_defs ]; then
  . ${HOME}/.my_sh_defs
fi

#################
## Keybindings ##
#################
# Emacs keybindings
bindkey -e

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# Fix some keys that might not work
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
function zle-line-init () {
    echoti smkx
}
function zle-line-finish () {
    echoti rmkx
}
#zle -N zle-line-init
#zle -N zle-line-finish

############
## Prompt ##
############
if [[ "$TERM" == "dumb" ]]; then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  PS1='$ '
else
  PROMPT="%B%F{green}[%F{yellow}%D{%a %b %d}%F{green}, %F{yellow}%*%F{green}]
(%F{cyan}%n%F{yellow}@%F{cyan}%m%F{green})
%F{yellow}[%F{green}%1~%F{yellow}] %(?.%F{green}âˆš.%F{red}?%?) %F{green}%#%f%b "
  PS4='xtrace: $LINENO: '
fi

#####################################
## General Environmental Variables ##
#####################################
export HISTSIZE=5000
# TODO: Figure out how to get the bash equivalent of HISTIGNORE

#############
## Options ##
#############
setopt autocd
setopt auto_resume
setopt histignoredups
setopt histignorespace

# Auto-completion on
autoload -U compinit
compinit
